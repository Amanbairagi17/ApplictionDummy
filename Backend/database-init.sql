-- Database initialization script for Grabtitude
-- Run this script in MySQL to set up the database

-- Create database if it doesn't exist
CREATE DATABASE IF NOT EXISTS grabtitude;
USE grabtitude;

-- Create tables (these will be auto-generated by Hibernate, but here for reference)

-- Users table (verified users)
CREATE TABLE IF NOT EXISTS user (
    user_id VARCHAR(255) PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    role VARCHAR(50) DEFAULT 'USER',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Pending verification users table
CREATE TABLE IF NOT EXISTS pending_verification_user (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    verification_token VARCHAR(255) NOT NULL,
    expiry_date DATE NOT NULL,
    role VARCHAR(50) DEFAULT 'USER',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Topics table
CREATE TABLE IF NOT EXISTS topic (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Problems table
CREATE TABLE IF NOT EXISTS problem (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    topic_id BIGINT,
    difficulty_level VARCHAR(50),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (topic_id) REFERENCES topic(id)
);

-- Problem options table
CREATE TABLE IF NOT EXISTS problem_option (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    problem_id BIGINT NOT NULL,
    option_text TEXT NOT NULL,
    is_correct BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (problem_id) REFERENCES problem(id)
);

-- Submissions table
CREATE TABLE IF NOT EXISTS submission (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    user_id VARCHAR(255) NOT NULL,
    problem_id BIGINT NOT NULL,
    selected_option_id BIGINT NOT NULL,
    is_correct BOOLEAN NOT NULL,
    submitted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES user(user_id),
    FOREIGN KEY (problem_id) REFERENCES problem(id),
    FOREIGN KEY (selected_option_id) REFERENCES problem_option(id)
);

-- Insert sample data for testing
INSERT INTO topic (name, description) VALUES 
('Mathematics', 'Basic mathematical concepts and problem solving'),
('Logical Reasoning', 'Logical thinking and analytical problems'),
('Verbal Ability', 'English language and comprehension');

-- Insert sample problems
INSERT INTO problem (title, description, topic_id, difficulty_level) VALUES 
('Basic Addition', 'What is 15 + 27?', 1, 'EASY'),
('Logical Sequence', 'Find the next number in the sequence: 2, 4, 8, 16, ?', 2, 'MEDIUM'),
('Word Meaning', 'Choose the correct meaning of "Ubiquitous"', 3, 'HARD');

-- Insert problem options
INSERT INTO problem_option (problem_id, option_text, is_correct) VALUES 
(1, '42', TRUE),
(1, '41', FALSE),
(1, '43', FALSE),
(1, '40', FALSE),
(2, '32', TRUE),
(2, '30', FALSE),
(2, '28', FALSE),
(2, '34', FALSE),
(3, 'Present everywhere', TRUE),
(3, 'Very small', FALSE),
(3, 'Very large', FALSE),
(3, 'Rare', FALSE);

-- Create indexes for better performance
CREATE INDEX idx_user_email ON user(email);
CREATE INDEX idx_pending_user_email ON pending_verification_user(email);
CREATE INDEX idx_problem_topic ON problem(topic_id);
CREATE INDEX idx_option_problem ON problem_option(problem_id);
CREATE INDEX idx_submission_user ON submission(user_id);
CREATE INDEX idx_submission_problem ON submission(problem_id);
